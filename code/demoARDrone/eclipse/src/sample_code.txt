		//		boost::asio::streambuf buf;
		//		//boost::iostreams::output out(&buf);
		//		std::ostream os( &buf);
		//		boost::iostreams::filtering_streambuf<boost::iostreams::output> fil_buf;
		//		fil_buf.push(boost::iostreams::zlib_compressor(boost::iostreams::zlib::best_speed));
		//		//fil_buf.push(os);
		//		fil_buf.push(buf);
		//
		//		std::ostream another_os( &fil_buf);

		//		boost::archive::text_oarchive ar( another_os );
		
		//--------------------------------------------------------------------------------

	//std::istream is( &buf );
	//
	//	boost::iostreams::filtering_streambuf<boost::iostreams::input> in;
	//	in.push(boost::iostreams::zlib_decompressor());
	//	//in.push(is);
	//	in.push(buf);
	//
	//	std::istream another_is(&in);
	//
	//	boost::archive::binary_iarchive ar( another_is );
	//--------------------------------------------------------------------------------
	
	boost::posix_time::ptime current_time = boost::posix_time::microsec_clock::local_time();
	boost::posix_time::time_duration diff = current_time - start_time;
	
	//--------------------------------------------------------------------------------
	close 					SDLK_ESCAPE
	
	engage, or dis-engage	SDLK_SPACE SDLK_b
	
	land or take off		SDLK_t SDLK_g
	
	move forward/backward 	SDLK_u SDLK_j
	move left or right 		SDLK_h SDLK_k
	up/down 				SDLK_o SDLK_l
	turn left or right		SDLK_y SDLK_i
	
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
working with navigation data
	//update in somewhere else, no need to use ooDrone.GlobalRotation or GlobalTranslatetion.
	//need to check, where is the source of GlobalRotation.
	// filter noisy measurements
	protected:
	hawaii::common::Tracker1DPT1 trkHeight,  // height above ground [m]
	                             trkRoll   ; // roll angle w.r.t. ground [rad], right is positive
	virtual void processNavdata( const ardrone_autonomy::Navdata navdata ) override {
		this->trkHeight( navdata.altd / 1000.0         ) ;
		this->trkRoll(   navdata.rotX * CV_PI / 180.0  ) ;
	}
	
	

